{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"desktopModeMediaQuery\", \"DialogProps\", \"PopperProps\", \"PaperProps\", \"TransitionComponent\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useThemeProps } from '@mui/material/styles';\nimport { useLicenseVerifier } from '@mui/x-license-pro';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport { getReleaseInfo } from '../internal/utils/releaseInfo';\nimport { DesktopDateRangePicker } from '../DesktopDateRangePicker';\nimport { MobileDateRangePicker } from '../MobileDateRangePicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst releaseInfo = getReleaseInfo();\n/**\n *\n * Demos:\n *\n * - [Date Range Picker](https://mui.com/x/react-date-pickers/date-range-picker/)\n *\n * API:\n *\n * - [DateRangePicker API](https://mui.com/x/api/date-pickers/date-range-picker/)\n */\n\nexport const DateRangePicker = /*#__PURE__*/React.forwardRef(function DateRangePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDateRangePicker'\n  });\n  useLicenseVerifier('x-date-pickers-pro', releaseInfo);\n\n  const {\n    desktopModeMediaQuery = '@media (pointer: fine)',\n    DialogProps,\n    PopperProps,\n    PaperProps,\n    TransitionComponent\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded); // defaults to `true` in environments where `window.matchMedia` would not be available (i.e. test/jsdom)\n\n\n  const isDesktop = useMediaQuery(desktopModeMediaQuery, {\n    defaultMatches: true\n  });\n\n  if (isDesktop) {\n    return /*#__PURE__*/_jsx(DesktopDateRangePicker, _extends({\n      ref: ref,\n      PopperProps: PopperProps,\n      PaperProps: PaperProps,\n      TransitionComponent: TransitionComponent\n    }, other));\n  }\n\n  return /*#__PURE__*/_jsx(MobileDateRangePicker, _extends({\n    ref: ref,\n    DialogProps: DialogProps\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DateRangePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n  autoFocus: PropTypes.bool,\n\n  /**\n   * The number of calendars that render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n\n  /**\n   * Overrideable components.\n   * @default {}\n   */\n  components: PropTypes.object,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Formats the day of week displayed in the calendar header.\n   * @param {string} day The day of week provided by the adapter's method `getWeekdays`.\n   * @returns {string} The name to display.\n   * @default (day) => day.charAt(0).toUpperCase()\n   */\n  dayOfWeekFormatter: PropTypes.func,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * CSS media query when `Mobile` mode will be changed to `Desktop`.\n   * @default '@media (pointer: fine)'\n   * @example '@media (min-width: 720px)' or theme.breakpoints.up(\"sm\")\n   */\n  desktopModeMediaQuery: PropTypes.string,\n\n  /**\n   * Props applied to the [`Dialog`](https://mui.com/material-ui/api/dialog/) element.\n   */\n  DialogProps: PropTypes.object,\n\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true` future days are disabled.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * If `true` past days are disabled.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Text for end input label and toolbar placeholder.\n   * @default 'End'\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.\n   */\n  endText: PropTypes.node,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @template TInputDate, TDate\n   * @param {TInputDate} date The date from which we want to add an aria-text.\n   * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.\n   * @returns {string} The aria-text to render inside the dialog.\n   * @default (date, utils) => `Choose date, selected date is ${utils.format(utils.date(date), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   * @param {CalendarPickerView} currentView The view from which we want to get the button text.\n   * @returns {string} The label of the view.\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   * @deprecated\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   * @default '__/__/____'\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Maximal selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Minimal selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   * @template TValue\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date range) changes @DateIOType.\n   * @template TDate\n   * @param {DateRange<TDate>} date The new parsed date range.\n   * @param {string} keyboardInputValue The current value of the keyboard input.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   *\n   * @template TError, TInputValue\n   * @param {TError} reason The reason why the current value is not valid.\n   * @param {TInputValue} value The invalid value.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change @DateIOType.\n   * @template TDate\n   * @param {TDate} month The new month.\n   * @returns {void|Promise} -\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   * @param {CalendarPickerView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * Paper props passed down to [Paper](https://mui.com/material-ui/api/paper/) component.\n   */\n  PaperProps: PropTypes.object,\n\n  /**\n   * Popper props passed down to [Popper](https://mui.com/material-ui/api/popper/) component.\n   */\n  PopperProps: PropTypes.object,\n\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\n   * @template TDate\n   * @param {TDate} day The day to render.\n   * @param {DateRangePickerDayProps<TDate>} dateRangePickerDayProps The props of the day to render.\n   * @returns {JSX.Element} The element representing the day.\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props),\n   * that you need to forward to the range start/end inputs respectively.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example\n   * ```jsx\n   * <DateRangePicker\n   *  renderInput={(startProps, endProps) => (\n   *   <React.Fragment>\n   *     <TextField {...startProps} />\n   *     <Box sx={{ mx: 2 }}> to </Box>\n   *     <TextField {...endProps} />\n   *   </React.Fragment>;\n   *  )}\n   * />\n   * ````\n   * @param {MuiTextFieldProps} startProps Props that you need to forward to the range start input.\n   * @param {MuiTextFieldProps} endProps Props that you need to forward to the range end input.\n   * @returns {React.ReactElement} The range input to render.\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   * @param {string} str The un-formatted string.\n   * @returns {string} The formatted string.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   * @deprecated\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   * @template TDate\n   * @param {TDate} day The date to test.\n   * @param {string} position The date to test, 'start' or 'end'.\n   * @returns {boolean} Returns `true` if the date should be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific months dynamically.\n   * Works like `shouldDisableDate` but for month selection view @DateIOType.\n   * @template TDate\n   * @param {TDate} month The month to check.\n   * @returns {boolean} If `true` the month will be disabled.\n   */\n  shouldDisableMonth: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   * @template TDate\n   * @param {TDate} year The year to test.\n   * @returns {boolean} Returns `true` if the year should be disabled.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Text for start input label and toolbar placeholder.\n   * @default 'Start'\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.\n   */\n  startText: PropTypes.node,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date range'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * Custom component for popper [Transition](https://mui.com/material-ui/transitions/#transitioncomponent-prop).\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.arrayOf(PropTypes.any).isRequired\n} : void 0;","map":{"version":3,"sources":["C:/Users/Кристина/Downloads/Telegram Desktop/psixCentr/main/node_modules/@mui/x-date-pickers-pro/DateRangePicker/DateRangePicker.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","useThemeProps","useLicenseVerifier","useMediaQuery","getReleaseInfo","DesktopDateRangePicker","MobileDateRangePicker","jsx","_jsx","releaseInfo","DateRangePicker","forwardRef","inProps","ref","props","name","desktopModeMediaQuery","DialogProps","PopperProps","PaperProps","TransitionComponent","other","isDesktop","defaultMatches","process","env","NODE_ENV","propTypes","acceptRegex","instanceOf","RegExp","autoFocus","bool","calendars","oneOf","children","node","className","string","closeOnSelect","components","object","componentsProps","dayOfWeekFormatter","func","defaultCalendarMonth","any","disableAutoMonthSwitching","disabled","disableFuture","disableHighlightToday","disableMaskedInput","disableOpenPicker","disablePast","endText","getOpenDialogAriaText","getViewSwitchingButtonText","ignoreInvalidInputs","InputAdornmentProps","inputFormat","InputProps","inputRef","oneOfType","shape","current","label","leftArrowButtonText","loading","mask","maxDate","minDate","onAccept","onChange","isRequired","onClose","onError","onMonthChange","onOpen","onViewChange","open","OpenPickerButtonProps","readOnly","reduceAnimations","renderDay","renderInput","renderLoading","rifmFormatter","rightArrowButtonText","shouldDisableDate","shouldDisableMonth","shouldDisableYear","showDaysOutsideCurrentMonth","showToolbar","startText","toolbarFormat","toolbarTitle","elementType","value","arrayOf"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"desktopModeMediaQuery\", \"DialogProps\", \"PopperProps\", \"PaperProps\", \"TransitionComponent\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useThemeProps } from '@mui/material/styles';\nimport { useLicenseVerifier } from '@mui/x-license-pro';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport { getReleaseInfo } from '../internal/utils/releaseInfo';\nimport { DesktopDateRangePicker } from '../DesktopDateRangePicker';\nimport { MobileDateRangePicker } from '../MobileDateRangePicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst releaseInfo = getReleaseInfo();\n\n/**\n *\n * Demos:\n *\n * - [Date Range Picker](https://mui.com/x/react-date-pickers/date-range-picker/)\n *\n * API:\n *\n * - [DateRangePicker API](https://mui.com/x/api/date-pickers/date-range-picker/)\n */\nexport const DateRangePicker = /*#__PURE__*/React.forwardRef(function DateRangePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDateRangePicker'\n  });\n  useLicenseVerifier('x-date-pickers-pro', releaseInfo);\n\n  const {\n    desktopModeMediaQuery = '@media (pointer: fine)',\n    DialogProps,\n    PopperProps,\n    PaperProps,\n    TransitionComponent\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded); // defaults to `true` in environments where `window.matchMedia` would not be available (i.e. test/jsdom)\n\n\n  const isDesktop = useMediaQuery(desktopModeMediaQuery, {\n    defaultMatches: true\n  });\n\n  if (isDesktop) {\n    return /*#__PURE__*/_jsx(DesktopDateRangePicker, _extends({\n      ref: ref,\n      PopperProps: PopperProps,\n      PaperProps: PaperProps,\n      TransitionComponent: TransitionComponent\n    }, other));\n  }\n\n  return /*#__PURE__*/_jsx(MobileDateRangePicker, _extends({\n    ref: ref,\n    DialogProps: DialogProps\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DateRangePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n  autoFocus: PropTypes.bool,\n\n  /**\n   * The number of calendars that render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n\n  /**\n   * Overrideable components.\n   * @default {}\n   */\n  components: PropTypes.object,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Formats the day of week displayed in the calendar header.\n   * @param {string} day The day of week provided by the adapter's method `getWeekdays`.\n   * @returns {string} The name to display.\n   * @default (day) => day.charAt(0).toUpperCase()\n   */\n  dayOfWeekFormatter: PropTypes.func,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * CSS media query when `Mobile` mode will be changed to `Desktop`.\n   * @default '@media (pointer: fine)'\n   * @example '@media (min-width: 720px)' or theme.breakpoints.up(\"sm\")\n   */\n  desktopModeMediaQuery: PropTypes.string,\n\n  /**\n   * Props applied to the [`Dialog`](https://mui.com/material-ui/api/dialog/) element.\n   */\n  DialogProps: PropTypes.object,\n\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true` future days are disabled.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * If `true` past days are disabled.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Text for end input label and toolbar placeholder.\n   * @default 'End'\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.\n   */\n  endText: PropTypes.node,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @template TInputDate, TDate\n   * @param {TInputDate} date The date from which we want to add an aria-text.\n   * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.\n   * @returns {string} The aria-text to render inside the dialog.\n   * @default (date, utils) => `Choose date, selected date is ${utils.format(utils.date(date), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   * @param {CalendarPickerView} currentView The view from which we want to get the button text.\n   * @returns {string} The label of the view.\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   * @deprecated\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   * @default '__/__/____'\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Maximal selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Minimal selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   * @template TValue\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date range) changes @DateIOType.\n   * @template TDate\n   * @param {DateRange<TDate>} date The new parsed date range.\n   * @param {string} keyboardInputValue The current value of the keyboard input.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   *\n   * @template TError, TInputValue\n   * @param {TError} reason The reason why the current value is not valid.\n   * @param {TInputValue} value The invalid value.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change @DateIOType.\n   * @template TDate\n   * @param {TDate} month The new month.\n   * @returns {void|Promise} -\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   * @param {CalendarPickerView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * Paper props passed down to [Paper](https://mui.com/material-ui/api/paper/) component.\n   */\n  PaperProps: PropTypes.object,\n\n  /**\n   * Popper props passed down to [Popper](https://mui.com/material-ui/api/popper/) component.\n   */\n  PopperProps: PropTypes.object,\n\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\n   * @template TDate\n   * @param {TDate} day The day to render.\n   * @param {DateRangePickerDayProps<TDate>} dateRangePickerDayProps The props of the day to render.\n   * @returns {JSX.Element} The element representing the day.\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props),\n   * that you need to forward to the range start/end inputs respectively.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example\n   * ```jsx\n   * <DateRangePicker\n   *  renderInput={(startProps, endProps) => (\n   *   <React.Fragment>\n   *     <TextField {...startProps} />\n   *     <Box sx={{ mx: 2 }}> to </Box>\n   *     <TextField {...endProps} />\n   *   </React.Fragment>;\n   *  )}\n   * />\n   * ````\n   * @param {MuiTextFieldProps} startProps Props that you need to forward to the range start input.\n   * @param {MuiTextFieldProps} endProps Props that you need to forward to the range end input.\n   * @returns {React.ReactElement} The range input to render.\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   * @param {string} str The un-formatted string.\n   * @returns {string} The formatted string.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   * @deprecated\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   * @template TDate\n   * @param {TDate} day The date to test.\n   * @param {string} position The date to test, 'start' or 'end'.\n   * @returns {boolean} Returns `true` if the date should be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific months dynamically.\n   * Works like `shouldDisableDate` but for month selection view @DateIOType.\n   * @template TDate\n   * @param {TDate} month The month to check.\n   * @returns {boolean} If `true` the month will be disabled.\n   */\n  shouldDisableMonth: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   * @template TDate\n   * @param {TDate} year The year to test.\n   * @returns {boolean} Returns `true` if the year should be disabled.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Text for start input label and toolbar placeholder.\n   * @default 'Start'\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.\n   */\n  startText: PropTypes.node,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date range'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * Custom component for popper [Transition](https://mui.com/material-ui/transitions/#transitioncomponent-prop).\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.arrayOf(PropTypes.any).isRequired\n} : void 0;"]},"metadata":{},"sourceType":"module"}