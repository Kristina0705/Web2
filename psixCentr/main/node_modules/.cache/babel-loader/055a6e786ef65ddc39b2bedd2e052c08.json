{"ast":null,"code":"import axios from 'axios';\nimport { removeCookie, setCookie } from \"typescript-cookie\";\nimport { RegisterFail, LoginFail } from \"../actions/authActions\";\nimport { clientActions } from \"../slices/clientslice\";\nconst API_URL = \"http://localhost:8080/auth/\";\n\nclass AuthService {\n  register(reg) {\n    return axios.post(API_URL + \"signup\", reg).then(res => {\n      const data = res.data;\n\n      if (data.status) {\n        setCookie(\"access_token\", data.answer.access_token, {\n          expires: 1,\n          path: ''\n        });\n        setCookie(\"refresh_token\", data.answer.refresh_token, {\n          path: ''\n        });\n        const user = data.answer.user;\n        localStorage.setItem('user', JSON.stringify(user));\n        return clientActions.registerSuccess({\n          isAuth: true,\n          user: user\n        });\n      }\n\n      return RegisterFail(data.errorText);\n    }).catch(err => {\n      return RegisterFail(err);\n    });\n  }\n\n  login(login) {\n    return axios.post(API_URL + \"signin\", login).then(res => {\n      const data = res.data;\n\n      if (data.status) {\n        setCookie(\"access_token\", data.answer.access_token, {\n          expires: 1,\n          path: ''\n        });\n        setCookie(\"refresh_token\", data.answer.refresh_token, {\n          path: ''\n        });\n        const user = data.answer.user;\n        localStorage.setItem('user', JSON.stringify(user));\n        return clientActions.loginSuccess({\n          isAuth: true,\n          user: user\n        });\n      }\n\n      return LoginFail(data.errorText);\n    }).catch(err => {\n      return LoginFail(err);\n    });\n  }\n\n  logout() {\n    removeCookie(\"access_token\", {\n      path: ''\n    });\n    removeCookie(\"refresh_token\", {\n      path: ''\n    });\n    localStorage.removeItem('user');\n    return clientActions.logout();\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"sources":["C:/Users/Кристина/Downloads/Telegram Desktop/psixCentr/main/src/redux/services/AuthService.ts"],"names":["axios","removeCookie","setCookie","RegisterFail","LoginFail","clientActions","API_URL","AuthService","register","reg","post","then","res","data","status","answer","access_token","expires","path","refresh_token","user","localStorage","setItem","JSON","stringify","registerSuccess","isAuth","errorText","catch","err","login","loginSuccess","logout","removeItem"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport {Answer, LoginModel, RegistrationModel} from \"../../models/RequestModel\";\r\nimport {removeCookie, setCookie} from \"typescript-cookie\";\r\nimport {RegisterSuccess, RegisterFail, LoginSuccess, LoginFail, Logout} from \"../actions/authActions\"\r\nimport {User} from \"../../models/UserModel\";\r\nimport {clientActions} from \"../slices/clientslice\";\r\n\r\nconst API_URL = \"http://localhost:8080/auth/\";\r\n\r\n\r\nclass AuthService {\r\n\tregister(reg: RegistrationModel) {\r\n\t\treturn axios.post(API_URL + \"signup\", reg)\r\n\t\t\t.then((res) => {\r\n\t\t\t\tconst data: Answer = res.data;\r\n\t\t\t\tif (data.status) {\r\n\t\t\t\t\tsetCookie(\"access_token\", data.answer.access_token, {expires: 1, path: ''});\r\n\t\t\t\t\tsetCookie(\"refresh_token\", data.answer.refresh_token, {path: ''});\r\n\t\t\t\t\tconst user: User = data.answer.user;\r\n\t\t\t\t\tlocalStorage.setItem('user', JSON.stringify(user))\r\n\t\t\t\t\treturn clientActions.registerSuccess({isAuth: true, user: user});\r\n\t\t\t\t}\r\n\t\t\t\treturn RegisterFail(data.errorText!);\r\n\t\t\t}).catch((err) => {\r\n\t\t\t\treturn RegisterFail(err);\r\n\t\t\t})\r\n\t}\r\n\r\n\tlogin(login: LoginModel) {\r\n\t\treturn axios.post(API_URL + \"signin\", login).then(\r\n\t\t\t(res) => {\r\n\t\t\t\tconst data: Answer = res.data;\r\n\t\t\t\tif (data.status) {\r\n\t\t\t\t\tsetCookie(\"access_token\", data.answer.access_token, {expires: 1, path: ''});\r\n\t\t\t\t\tsetCookie(\"refresh_token\", data.answer.refresh_token, {path: ''});\r\n\t\t\t\t\tconst user: User = data.answer.user;\r\n\t\t\t\t\tlocalStorage.setItem('user', JSON.stringify(user));\r\n\t\t\t\t\treturn clientActions.loginSuccess({isAuth: true, user: user});\r\n\t\t\t\t}\r\n\t\t\t\treturn LoginFail(data.errorText!);\r\n\t\t\t}).catch((err) => {\r\n\t\t\treturn LoginFail(err);\r\n\t\t})\r\n\t}\r\n\tlogout(){\r\n\t\tremoveCookie(\"access_token\", {path: ''});\r\n\t\tremoveCookie(\"refresh_token\", {path: ''});\r\n\t\tlocalStorage.removeItem('user');\r\n\t\treturn clientActions.logout();\r\n\t}\r\n}\r\nexport default new AuthService();"]},"metadata":{},"sourceType":"module"}