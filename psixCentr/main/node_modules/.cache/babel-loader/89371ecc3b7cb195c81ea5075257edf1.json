{"ast":null,"code":"import axios from 'axios';\nimport authHeader from '../AuthHeader';\nconst API_URL = \"http://localhost:8080/appeal/\";\n\nclass AppealService {\n  getAppeals() {\n    return axios.get(API_URL + \"get-all-appeals\", {\n      headers: authHeader()\n    }).then(response => {\n      console.log(response.data);\n      const data = response.data;\n\n      if (data.status) {\n        const appeals = data.answer.appeals;\n        return appeals;\n      }\n\n      return [];\n    }).catch(error => {\n      console.log(error);\n      return [];\n    });\n  }\n\n  getHistoryAppeal() {\n    return axios.get(API_URL + \"history-appeal\", {\n      headers: authHeader()\n    }).then(response => {\n      console.log(response.data);\n      const data = response.data;\n\n      if (data.status) {\n        const appeals = data.answer.appeals;\n        const answers = data.answer.answers;\n        const types = data.answer.typesAppeal;\n        return {\n          appeals: appeals,\n          answers: answers,\n          types: types\n        };\n      }\n\n      return {\n        appeals: [],\n        answers: [],\n        types: []\n      };\n    }).catch(error => {\n      console.log(error);\n      return {\n        appeals: [],\n        answers: [],\n        types: []\n      };\n    });\n  }\n\n  filterAppeal(type) {\n    return axios.get(API_URL + \"history-appeal?type=\" + type, {\n      headers: authHeader()\n    }).then(response => {\n      console.log(response.data);\n      const data = response.data;\n\n      if (data.status) {\n        const appeals = data.answer.appeals;\n        const answers = data.answer.answers;\n        const types = data.answer.typesAppeal;\n        return {\n          appeals: appeals,\n          answers: answers,\n          types: types\n        };\n      }\n\n      return {\n        appeals: [],\n        answers: [],\n        types: []\n      };\n    }).catch(error => {\n      console.log(error);\n      return {\n        appeals: [],\n        answers: [],\n        types: []\n      };\n    });\n  }\n\n  AddAppeal(data) {\n    return axios.post(API_URL + \"add-appeal\", data, {\n      headers: authHeader()\n    }).then(response => {\n      const data = response.data;\n      return data.status;\n    }).catch(error => {\n      console.log(error);\n      return false;\n    });\n  }\n\n}\n\nexport default new AppealService();","map":{"version":3,"sources":["C:/Users/Кристина/Downloads/Telegram Desktop/psixCentr/main/src/redux/services/AppealService.ts"],"names":["axios","authHeader","API_URL","AppealService","getAppeals","get","headers","then","response","console","log","data","status","appeals","answer","catch","error","getHistoryAppeal","answers","types","typesAppeal","filterAppeal","type","AddAppeal","post"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport {Answer} from \"../../models/RequestModel\";\r\nimport authHeader from '../AuthHeader';\r\nimport {Appeal, PostAppeal} from \"../../models/AppealModel\";\r\nimport { TypeAppeal } from '../../models/TypeAppealModel';\r\n\r\nconst API_URL = \"http://localhost:8080/appeal/\";\r\n\r\n\r\nclass AppealService {\r\n        getAppeals(){\r\n            return axios.get(API_URL + \"get-all-appeals\",{headers:authHeader()})\r\n            .then((response) => {\r\n                console.log(response.data);\r\n                const data: Answer = response.data;\r\n                if (data.status){\r\n                  const appeals: Appeal[] = data.answer.appeals\r\n                  return appeals;\r\n                }\r\n                return []\r\n              })\r\n              .catch((error) => {\r\n                console.log(error);\r\n                return []\r\n              });\r\n        }\r\n        getHistoryAppeal(){\r\n            return axios.get(API_URL + \"history-appeal\",{headers:authHeader()})\r\n            .then((response) => {\r\n                console.log(response.data);\r\n                const data: Answer = response.data;\r\n                if (data.status){\r\n                  const appeals: Appeal[] = data.answer.appeals\r\n                  const answers: Answer[] = data.answer.answers\r\n                  const types: TypeAppeal[] = data.answer.typesAppeal\r\n                  return {appeals:appeals,answers:answers,types:types} \r\n                }\r\n                return {appeals:[],answers:[],types:[]}\r\n              })\r\n              .catch((error) => {\r\n                console.log(error);\r\n                return {appeals:[],answers:[],types:[]}\r\n              });\r\n        }\r\n        filterAppeal(type:string){\r\n            return axios.get(API_URL + \"history-appeal?type=\"+type,{headers:authHeader()})\r\n            .then((response) => {\r\n                console.log(response.data);\r\n                const data: Answer = response.data;\r\n                if (data.status){\r\n                  const appeals: Appeal[] = data.answer.appeals\r\n                  const answers: Answer[] = data.answer.answers\r\n                  const types: TypeAppeal[] = data.answer.typesAppeal\r\n                  return {appeals:appeals,answers:answers,types:types} \r\n                }\r\n                return {appeals:[],answers:[],types:[]}\r\n              })\r\n              .catch((error) => {\r\n                console.log(error);\r\n                return {appeals:[],answers:[],types:[]}\r\n              });\r\n        }\r\n        AddAppeal(data:PostAppeal){\r\n            return axios.post(API_URL + \"add-appeal\",data,{headers:authHeader()})\r\n            .then((response) => {\r\n                const data: Answer = response.data;\r\n                  return data.status;\r\n              })\r\n              .catch((error) => {\r\n                console.log(error);\r\n                return false;\r\n              });\r\n        }\r\n}\r\nexport default new AppealService();"]},"metadata":{},"sourceType":"module"}