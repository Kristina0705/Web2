{"ast":null,"code":"import * as React from 'react';\nimport { verifyLicense } from '../verifyLicense/verifyLicense';\nimport { LicenseInfo } from '../utils/licenseInfo';\nimport { showExpiredLicenseError, showInvalidLicenseError, showNotFoundLicenseError, showOutOfScopeLicenseError } from '../utils/licenseErrorMessageUtils';\nimport { LicenseStatus } from '../utils/licenseStatus';\nexport const sharedLicenseStatuses = {};\nexport function useLicenseVerifier(packageName, releaseInfo) {\n  return React.useMemo(() => {\n    const licenseKey = LicenseInfo.getLicenseKey();\n\n    if (sharedLicenseStatuses[packageName] && sharedLicenseStatuses[packageName].key === licenseKey) {\n      return sharedLicenseStatuses[packageName].status;\n    }\n\n    const acceptedScopes = packageName.includes('premium') ? ['premium'] : ['pro', 'premium'];\n    const plan = packageName.includes('premium') ? 'Premium' : 'Pro';\n    const licenseStatus = verifyLicense({\n      releaseInfo,\n      licenseKey,\n      acceptedScopes,\n      isProduction: process.env.NODE_ENV === 'production'\n    });\n    sharedLicenseStatuses[packageName] = {\n      key: licenseKey,\n      status: licenseStatus\n    };\n\n    if (licenseStatus === LicenseStatus.Invalid) {\n      showInvalidLicenseError();\n    } else if (licenseStatus === LicenseStatus.OutOfScope) {\n      showOutOfScopeLicenseError();\n    } else if (licenseStatus === LicenseStatus.NotFound) {\n      showNotFoundLicenseError({\n        plan,\n        packageName: `@mui/${packageName}`\n      });\n    } else if (licenseStatus === LicenseStatus.Expired) {\n      showExpiredLicenseError();\n    }\n\n    return licenseStatus;\n  }, [packageName, releaseInfo]);\n}","map":{"version":3,"sources":["C:/Users/Кристина/Downloads/Telegram Desktop/psixCentr/main/node_modules/@mui/x-license-pro/useLicenseVerifier/useLicenseVerifier.js"],"names":["React","verifyLicense","LicenseInfo","showExpiredLicenseError","showInvalidLicenseError","showNotFoundLicenseError","showOutOfScopeLicenseError","LicenseStatus","sharedLicenseStatuses","useLicenseVerifier","packageName","releaseInfo","useMemo","licenseKey","getLicenseKey","key","status","acceptedScopes","includes","plan","licenseStatus","isProduction","process","env","NODE_ENV","Invalid","OutOfScope","NotFound","Expired"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,gCAA9B;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,uBAAT,EAAkCC,uBAAlC,EAA2DC,wBAA3D,EAAqFC,0BAArF,QAAuH,mCAAvH;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAO,MAAMC,qBAAqB,GAAG,EAA9B;AACP,OAAO,SAASC,kBAAT,CAA4BC,WAA5B,EAAyCC,WAAzC,EAAsD;AAC3D,SAAOX,KAAK,CAACY,OAAN,CAAc,MAAM;AACzB,UAAMC,UAAU,GAAGX,WAAW,CAACY,aAAZ,EAAnB;;AAEA,QAAIN,qBAAqB,CAACE,WAAD,CAArB,IAAsCF,qBAAqB,CAACE,WAAD,CAArB,CAAmCK,GAAnC,KAA2CF,UAArF,EAAiG;AAC/F,aAAOL,qBAAqB,CAACE,WAAD,CAArB,CAAmCM,MAA1C;AACD;;AAED,UAAMC,cAAc,GAAGP,WAAW,CAACQ,QAAZ,CAAqB,SAArB,IAAkC,CAAC,SAAD,CAAlC,GAAgD,CAAC,KAAD,EAAQ,SAAR,CAAvE;AACA,UAAMC,IAAI,GAAGT,WAAW,CAACQ,QAAZ,CAAqB,SAArB,IAAkC,SAAlC,GAA8C,KAA3D;AACA,UAAME,aAAa,GAAGnB,aAAa,CAAC;AAClCU,MAAAA,WADkC;AAElCE,MAAAA,UAFkC;AAGlCI,MAAAA,cAHkC;AAIlCI,MAAAA,YAAY,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB;AAJL,KAAD,CAAnC;AAMAhB,IAAAA,qBAAqB,CAACE,WAAD,CAArB,GAAqC;AACnCK,MAAAA,GAAG,EAAEF,UAD8B;AAEnCG,MAAAA,MAAM,EAAEI;AAF2B,KAArC;;AAKA,QAAIA,aAAa,KAAKb,aAAa,CAACkB,OAApC,EAA6C;AAC3CrB,MAAAA,uBAAuB;AACxB,KAFD,MAEO,IAAIgB,aAAa,KAAKb,aAAa,CAACmB,UAApC,EAAgD;AACrDpB,MAAAA,0BAA0B;AAC3B,KAFM,MAEA,IAAIc,aAAa,KAAKb,aAAa,CAACoB,QAApC,EAA8C;AACnDtB,MAAAA,wBAAwB,CAAC;AACvBc,QAAAA,IADuB;AAEvBT,QAAAA,WAAW,EAAG,QAAOA,WAAY;AAFV,OAAD,CAAxB;AAID,KALM,MAKA,IAAIU,aAAa,KAAKb,aAAa,CAACqB,OAApC,EAA6C;AAClDzB,MAAAA,uBAAuB;AACxB;;AAED,WAAOiB,aAAP;AACD,GAlCM,EAkCJ,CAACV,WAAD,EAAcC,WAAd,CAlCI,CAAP;AAmCD","sourcesContent":["import * as React from 'react';\nimport { verifyLicense } from '../verifyLicense/verifyLicense';\nimport { LicenseInfo } from '../utils/licenseInfo';\nimport { showExpiredLicenseError, showInvalidLicenseError, showNotFoundLicenseError, showOutOfScopeLicenseError } from '../utils/licenseErrorMessageUtils';\nimport { LicenseStatus } from '../utils/licenseStatus';\nexport const sharedLicenseStatuses = {};\nexport function useLicenseVerifier(packageName, releaseInfo) {\n  return React.useMemo(() => {\n    const licenseKey = LicenseInfo.getLicenseKey();\n\n    if (sharedLicenseStatuses[packageName] && sharedLicenseStatuses[packageName].key === licenseKey) {\n      return sharedLicenseStatuses[packageName].status;\n    }\n\n    const acceptedScopes = packageName.includes('premium') ? ['premium'] : ['pro', 'premium'];\n    const plan = packageName.includes('premium') ? 'Premium' : 'Pro';\n    const licenseStatus = verifyLicense({\n      releaseInfo,\n      licenseKey,\n      acceptedScopes,\n      isProduction: process.env.NODE_ENV === 'production'\n    });\n    sharedLicenseStatuses[packageName] = {\n      key: licenseKey,\n      status: licenseStatus\n    };\n\n    if (licenseStatus === LicenseStatus.Invalid) {\n      showInvalidLicenseError();\n    } else if (licenseStatus === LicenseStatus.OutOfScope) {\n      showOutOfScopeLicenseError();\n    } else if (licenseStatus === LicenseStatus.NotFound) {\n      showNotFoundLicenseError({\n        plan,\n        packageName: `@mui/${packageName}`\n      });\n    } else if (licenseStatus === LicenseStatus.Expired) {\n      showExpiredLicenseError();\n    }\n\n    return licenseStatus;\n  }, [packageName, releaseInfo]);\n}"]},"metadata":{},"sourceType":"module"}