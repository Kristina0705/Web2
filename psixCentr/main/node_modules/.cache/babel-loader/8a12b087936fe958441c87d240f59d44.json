{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  isAuth: localStorage.getItem('user') !== null,\n  user: localStorage.getItem('user') === null ? null : JSON.parse(localStorage.getItem('user'))\n};\nconst clientSlice = createSlice({\n  name: 'Client',\n  initialState: initialState,\n  reducers: {\n    registerSuccess: (state, action) => state = action.payload,\n    loginSuccess: (state, action) => state = action.payload,\n    logout: state => state = {\n      isAuth: false,\n      user: null\n    },\n    addedAvatar: (state, action) => {\n      state.user = action.payload;\n    }\n  }\n});\nexport const clientReducer = clientSlice.reducer;\nexport const clientActions = clientSlice.actions;","map":{"version":3,"sources":["C:/Users/Кристина/Downloads/Telegram Desktop/psixCentr/main/src/redux/slices/clientslice.ts"],"names":["createSlice","initialState","isAuth","localStorage","getItem","user","JSON","parse","clientSlice","name","reducers","registerSuccess","state","action","payload","loginSuccess","logout","addedAvatar","clientReducer","reducer","clientActions","actions"],"mappings":"AAAA,SAAQA,WAAR,QAAyC,kBAAzC;AAQA,MAAMC,YAAmB,GAAG;AAC3BC,EAAAA,MAAM,EAAEC,YAAY,CAACC,OAAb,CAAqB,MAArB,MAAiC,IADd;AAE3BC,EAAAA,IAAI,EAAEF,YAAY,CAACC,OAAb,CAAqB,MAArB,MAAiC,IAAjC,GAAwC,IAAxC,GAA+CE,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX;AAF1B,CAA5B;AAKA,MAAMI,WAAW,GAAGR,WAAW,CAAC;AAC/BS,EAAAA,IAAI,EAAE,QADyB;AAE/BR,EAAAA,YAAY,EAAEA,YAFiB;AAG/BS,EAAAA,QAAQ,EAAE;AACTC,IAAAA,eAAe,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAyCD,KAAK,GAAGC,MAAM,CAACC,OADhE;AAETC,IAAAA,YAAY,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAyCD,KAAK,GAAGC,MAAM,CAACC,OAF7D;AAGTE,IAAAA,MAAM,EAAGJ,KAAD,IAAWA,KAAK,GAAG;AAACV,MAAAA,MAAM,EAAE,KAAT;AAAgBG,MAAAA,IAAI,EAAE;AAAtB,KAHlB;AAITY,IAAAA,WAAW,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAwC;AACpDD,MAAAA,KAAK,CAACP,IAAN,GAAaQ,MAAM,CAACC,OAApB;AACA;AANQ;AAHqB,CAAD,CAA/B;AAaA,OAAO,MAAMI,aAAa,GAAGV,WAAW,CAACW,OAAlC;AACP,OAAO,MAAMC,aAAa,GAAGZ,WAAW,CAACa,OAAlC","sourcesContent":["import {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {User} from \"../../models/UserModel\";\r\n\r\nexport interface State {\r\n\tisAuth: boolean,\r\n\tuser: User | null\r\n}\r\n\r\nconst initialState: State = {\r\n\tisAuth: localStorage.getItem('user') !== null,\r\n\tuser: localStorage.getItem('user') === null ? null : JSON.parse(localStorage.getItem('user')!) as User\r\n}\r\n\r\nconst clientSlice = createSlice({\r\n\tname: 'Client',\r\n\tinitialState: initialState as State,\r\n\treducers: {\r\n\t\tregisterSuccess: (state, action: PayloadAction<State>) => state = action.payload,\r\n\t\tloginSuccess: (state, action: PayloadAction<State>) => state = action.payload,\r\n\t\tlogout: (state) => state = {isAuth: false, user: null},\r\n\t\taddedAvatar: (state, action: PayloadAction<User>) => {\r\n\t\t\tstate.user = action.payload\r\n\t\t}\r\n\t}\r\n});\r\n\r\nexport const clientReducer = clientSlice.reducer;\r\nexport const clientActions = clientSlice.actions;"]},"metadata":{},"sourceType":"module"}