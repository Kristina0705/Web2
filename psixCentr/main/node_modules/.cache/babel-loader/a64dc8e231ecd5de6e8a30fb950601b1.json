{"ast":null,"code":"import axios from 'axios';\nconst API_URL = \"http://localhost:8080/types-appeal/\";\n\nclass TypeAppealService {\n  getTypesAppeal() {\n    return axios.get(API_URL + \"get\").then(response => {\n      console.log(response.data);\n      const data = response.data;\n\n      if (data.status) {\n        const types = data.answer.typesAppeal;\n        return types;\n      }\n\n      return [];\n    }).catch(error => {\n      console.log(error);\n      return [];\n    });\n  }\n\n}\n\nexport default new TypeAppealService();","map":{"version":3,"sources":["C:/Users/Кристина/Downloads/Telegram Desktop/psixCentr/main/src/redux/services/TypeAppealService.ts"],"names":["axios","API_URL","TypeAppealService","getTypesAppeal","get","then","response","console","log","data","status","types","answer","typesAppeal","catch","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAIA,MAAMC,OAAO,GAAG,qCAAhB;;AAGA,MAAMC,iBAAN,CAAwB;AAChBC,EAAAA,cAAc,GAAE;AACZ,WAAOH,KAAK,CAACI,GAAN,CAAUH,OAAO,GAAG,KAApB,EACNI,IADM,CACAC,QAAD,IAAc;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACA,YAAMA,IAAY,GAAGH,QAAQ,CAACG,IAA9B;;AACA,UAAIA,IAAI,CAACC,MAAT,EAAgB;AACd,cAAMC,KAAmB,GAAGF,IAAI,CAACG,MAAL,CAAYC,WAAxC;AACA,eAAOF,KAAP;AACD;;AACD,aAAO,EAAP;AACD,KATI,EAUJG,KAVI,CAUGC,KAAD,IAAW;AAChBR,MAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACA,aAAO,EAAP;AACD,KAbI,CAAP;AAcH;;AAhBe;;AAkBxB,eAAe,IAAIb,iBAAJ,EAAf","sourcesContent":["import axios from 'axios';\r\nimport {Answer} from \"../../models/RequestModel\";\r\nimport {TypeAppeal} from \"../../models/TypeAppealModel\";\r\n\r\nconst API_URL = \"http://localhost:8080/types-appeal/\";\r\n\r\n\r\nclass TypeAppealService {\r\n        getTypesAppeal(){\r\n            return axios.get(API_URL + \"get\")\r\n            .then((response) => {\r\n                console.log(response.data);\r\n                const data: Answer = response.data;\r\n                if (data.status){\r\n                  const types: TypeAppeal[] = data.answer.typesAppeal\r\n                  return types;\r\n                }\r\n                return []\r\n              })\r\n              .catch((error) => {\r\n                console.log(error);\r\n                return []\r\n              });\r\n        }\r\n}\r\nexport default new TypeAppealService();"]},"metadata":{},"sourceType":"module"}