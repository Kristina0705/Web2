[{"C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\index.tsx":"1","C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\reportWebVitals.ts":"2","C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\redux\\store.ts":"3","C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\components\\Header.tsx":"4","C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\components\\Home.tsx":"5","C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\components\\AnswerHistory.tsx":"6","C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\components\\AppealHistory.tsx":"7","C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\components\\RegisterModal.tsx":"8","C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\components\\AuthModal.tsx":"9","C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\components\\DocHome.tsx":"10","C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\redux\\slices\\clientslice.ts":"11","C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\components\\PsixHome.tsx":"12","C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\redux\\services\\AuthService.ts":"13","C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\redux\\services\\AnswerService.ts":"14","C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\redux\\services\\AppealService.ts":"15","C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\redux\\AuthHeader.ts":"16","C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\redux\\actions\\authActions.tsx":"17","C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\redux\\services\\TypeAppealService.ts":"18"},{"size":1018,"mtime":1670055976276,"results":"19","hashOfConfig":"20"},{"size":440,"mtime":1651641713940,"results":"21","hashOfConfig":"20"},{"size":301,"mtime":1652533110992,"results":"22","hashOfConfig":"20"},{"size":7167,"mtime":1670098491116,"results":"23","hashOfConfig":"20"},{"size":543,"mtime":1670055947657,"results":"24","hashOfConfig":"20"},{"size":6208,"mtime":1670075735066,"results":"25","hashOfConfig":"20"},{"size":4651,"mtime":1670076941179,"results":"26","hashOfConfig":"20"},{"size":5539,"mtime":1670077633605,"results":"27","hashOfConfig":"20"},{"size":4599,"mtime":1670077454658,"results":"28","hashOfConfig":"20"},{"size":5314,"mtime":1670075402825,"results":"29","hashOfConfig":"20"},{"size":907,"mtime":1670056123371,"results":"30","hashOfConfig":"20"},{"size":4557,"mtime":1670073738711,"results":"31","hashOfConfig":"20"},{"size":1863,"mtime":1669983560506,"results":"32","hashOfConfig":"20"},{"size":1847,"mtime":1669985339736,"results":"33","hashOfConfig":"20"},{"size":2951,"mtime":1670058723319,"results":"34","hashOfConfig":"20"},{"size":209,"mtime":1655112022135,"results":"35","hashOfConfig":"20"},{"size":351,"mtime":1652027949125,"results":"36","hashOfConfig":"20"},{"size":807,"mtime":1669984102024,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fkt8e2",{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\index.tsx",[],[],"C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\reportWebVitals.ts",[],[],"C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\redux\\store.ts",[],[],"C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\components\\Header.tsx",["100","101","102","103","104","105","106","107"],[],"C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\components\\Home.tsx",[],[],"C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\components\\AnswerHistory.tsx",["108","109","110","111","112","113"],[],"import React from 'react';\r\nimport { Dayjs } from 'dayjs';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers-pro';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers-pro/AdapterDayjs';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport Grid from '@mui/material/Grid'\r\nimport Box from '@mui/material/Box'\r\nimport TextField from '@mui/material/TextField'\r\nimport Button from '@mui/material/Button'\r\nimport Card from '@mui/material/Card'\r\nimport Modal from '@mui/material/Modal';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport Alert from '@mui/material/Alert'; \r\nimport { CardContent, Typography, SelectChangeEvent } from '@mui/material';\r\nimport \"../assets/css/scrollbar.css\"\r\nimport AnswerService from '../redux/services/AnswerService';\r\nimport { AnswerModel } from '../models/AnswerModel';\r\nimport { Dates } from '../models/DatesModel';\r\n\r\nconst style = {\r\n    position: 'absolute' as 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 400,\r\n    bgcolor: 'background.paper',\r\n    border: '2px solid #000',\r\n    boxShadow: 24,\r\n    p: 4,\r\n    display:\"flex\",\r\n    flexDirection:\"column\",\r\n    alignItems:\"center\"\r\n  };\r\n\r\n\r\nfunction AnswerHistory() {\r\n\r\n  const [dates,setDates] = React.useState<Dates>({\r\n    startdate:\"\",\r\n    finishdate:\"\"\r\n  })\r\n  const [successShow,setSuccessShow] = React.useState(false);\r\n    const toggleSuccessShow = () => setSuccessShow(!successShow)\r\n    const [noDataShow,setNoDataShow] = React.useState(false);\r\n    const toggleNoDataShow = () => setNoDataShow(!noDataShow);\r\n  const [answers,setAnswers] = React.useState<AnswerModel[]>([])\r\n    const [startValue, setStartValue] = React.useState<Dayjs | null>(null);\r\n    const [endValue, setEndValue] = React.useState<Dayjs | null>(null);\r\n    const [open,setOpen] = React.useState(false);\r\n    const handleClose = () => setOpen(false);\r\n    const handleOpen = () => setOpen(true);\r\n    const [key,setKey] = React.useState<boolean>(false);\r\n    const [appealType,setAppealType]= React.useState<string>();\r\n    const handleChange = (event: SelectChangeEvent) => {\r\n    setAppealType(event.target.value as string);\r\n  };\r\n  React.useEffect(() => {\r\n    if (key) return;\r\n    AnswerService.getAnswers().then((res)=>{\r\n      if (res !== undefined){\r\n        setAnswers(res)\r\n      }\r\n    })\r\n    setKey(true)\r\n  }, [answers,key])\r\n\r\n\r\n  return (\r\n<>\r\n<Box sx={{\r\n    mt:2,\r\n    mx:4,\r\n    display:\"flex\",\r\n    flexDirection:\"column\",\r\n    alignItems:\"center\",\r\n}}>\r\n    <Box sx={{\r\n        display:\"flex\",\r\n        justifyContent:\"space-between\",\r\n        width:\"100%\"\r\n    }}>\r\n    <Typography variant=\"h4\" sx={{\r\n    }}>\r\n        Мои ответы\r\n    </Typography>\r\n    <Button variant=\"contained\" onClick={handleOpen} sx={{\r\n    }}>\r\n        Сформировать отчет\r\n    </Button>\r\n    </Box>\r\n    \r\n\r\n    <Grid container mt={1} rowSpacing={3} columnSpacing={3} columns={{md: 12}} >\r\n        {answers.map((answer)=>(\r\n          <Grid item md={4}>\r\n            <Card className=\"scrollbar\" sx={{\r\n                height:\"200px\",\r\n                border:\"1px #000 solid\",\r\n                overflowY:\"auto\"\r\n            }}>\r\n                <CardContent>\r\n                    <Typography>\r\n                        <b> Пациент: </b> {answer.appeal.user.surname} {answer.appeal.user.name}\r\n                    </Typography>\r\n                    <Typography >\r\n                        <b> Тип обращения: </b> {answer.appeal.typeappeal}\r\n                    </Typography>\r\n                    <Typography>\r\n                        <b>Дата обращения:</b> {answer.appeal.date}\r\n                    </Typography>\r\n                    <Typography  >\r\n                    <b>Текст обращения: </b>   {answer.appeal.text}\r\n                    </Typography>\r\n                    <Typography variant=\"body1\" sx={{\r\n                        mt:2\r\n                    }}>\r\n                    <b>Ответ:</b>   {answer.answertext}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n        ))}\r\n        \r\n        \r\n    </Grid>\r\n</Box>\r\n<Modal open={open}\r\n        onClose={handleClose}>\r\n    <Box sx={style}>\r\n        <Typography variant=\"h5\">\r\n            Выберите период для отчета\r\n        </Typography>\r\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n        <Box sx={{\r\n            mt:2    \r\n        }}>\r\n        <DatePicker\r\n        label=\"Начальная дата\"\r\n        value={dates.startdate}\r\n        onChange={(newValue:Dayjs| null) => {setDates({...dates,startdate:newValue!.format('DD/MM/YYYY')})\r\n        }}\r\n        renderInput={(params) => <TextField {...params} \r\n        />}\r\n      />  \r\n        </Box>\r\n      <Box sx={{\r\n        mt:2,\r\n        mb:2\r\n        }}>\r\n      <DatePicker \r\n        label=\"Конечная дата\"\r\n        value={dates.finishdate}\r\n        onChange={(newValue:Dayjs| null) => {setDates({...dates,finishdate:newValue!.format('DD/MM/YYYY')})\r\n        }}\r\n        renderInput={(params) => <TextField {...params} />}\r\n      />\r\n      </Box>\r\n      </LocalizationProvider>\r\n      <Button onClick={e=>{if (dates.startdate===\"\"||dates.finishdate===\"\"){setNoDataShow(true);return;}\r\n        AnswerService.MakeReport(dates).then((res)=>{\r\n          if(res){\r\n            handleClose();\r\n            setSuccessShow(true);\r\n          }\r\n        })}} variant=\"contained\">\r\n        Сгенерировать отчет\r\n      </Button>\r\n    </Box>\r\n</Modal>\r\n<Snackbar open={noDataShow} autoHideDuration={5000} onClose={toggleNoDataShow}>\r\n        <Alert onClose={toggleNoDataShow} severity=\"error\" sx={{ width: '100%' }}>\r\n          Заполните все поля!\r\n        </Alert>\r\n      </Snackbar>\r\n      <Snackbar open={successShow} autoHideDuration={5000} onClose={toggleSuccessShow}>\r\n        <Alert onClose={toggleSuccessShow} severity=\"success\" sx={{ width: '100%' }}>\r\n          Отчет отправлен успешно.\r\n        </Alert>\r\n      </Snackbar>\r\n</>\r\n  );\r\n}\r\n\r\nexport default AnswerHistory;","C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\components\\AppealHistory.tsx",["114"],[],"import React from 'react';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport Grid from '@mui/material/Grid'\r\nimport Box from '@mui/material/Box'\r\nimport Card from '@mui/material/Card'\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { CardContent, MenuItem, Select, Typography, SelectChangeEvent } from '@mui/material';\r\nimport \"../assets/css/scrollbar.css\"\r\nimport AppealService from '../redux/services/AppealService';\r\nimport { AnswerModel } from '../models/AnswerModel';\r\nimport { Appeal } from '../models/AppealModel';\r\nimport { TypeAppeal } from '../models/TypeAppealModel';\r\nimport { type } from '@testing-library/user-event/dist/type';\r\n\r\nfunction AppealHistory() {\r\n\r\n    const [answers,setAnswers] = React.useState<AnswerModel[]>([]);\r\n    const [appeals,setAppeals] = React.useState<Appeal[]>([]);\r\n    const [types,setTypes] = React.useState<TypeAppeal[]>([]);\r\n    const [appealType,setAppealType]= React.useState<string>();\r\n    const [key,setKey] = React.useState<boolean>(false);\r\n    const handleChange = (event: SelectChangeEvent) => {\r\n    setAppealType(event.target.value as string);\r\n  };\r\n  const getAppealsWithParams = (type:string) =>{\r\n    AppealService.filterAppeal(type).then((res:any) => {\r\n        setAnswers(res.answers);\r\n        setAppeals(res.appeals);\r\n        setTypes(res.types);\r\n    })\r\n  }\r\n  React.useEffect(() => {\r\n    if (key) return;\r\n    AppealService.getHistoryAppeal().then((res:any)=>{\r\n      if (res !== undefined){\r\n        setAnswers(res.answers);\r\n        setAppeals(res.appeals);\r\n        setTypes(res.types);\r\n\r\n      }\r\n    })\r\n    setKey(true)\r\n  }, [answers,appeals,types,key])\r\n  return (\r\n<>\r\n<Box sx={{\r\n    mt:2,\r\n    mx:4,\r\n    display:\"flex\",\r\n    flexDirection:\"column\",\r\n    alignItems:\"center\",\r\n}}>\r\n    <Typography variant=\"h4\">\r\n        Мои обращения\r\n    </Typography>\r\n    <FormControl sx={{\r\n        width:\"25%\",\r\n        mt:2\r\n    }}>\r\n    <InputLabel id=\"appeal\">Тип обращения</InputLabel>\r\n    <Select labelId='appeal' label=\"appeal\" value={appealType} onChange={e=>{handleChange(e); getAppealsWithParams(e.target.value)}}>\r\n        <MenuItem value=\"\">\r\n        <em>Тип обращения</em>\r\n        </MenuItem>\r\n        {types?.map((type)=>(\r\n        <MenuItem value={type.TypeName}>\r\n        {type.TypeName}\r\n        </MenuItem>\r\n        ))}\r\n        \r\n       \r\n    </Select>\r\n    </FormControl>\r\n    \r\n    <Grid container mt={1} rowSpacing={3} columnSpacing={3} columns={{md: 12}}>\r\n        {appeals?.map((appeal)=>(\r\n            <Grid item md={4}>\r\n            <Card className=\"scrollbar\" sx={{\r\n                height:\"200px\",\r\n                border:\"1px #000 solid\",\r\n                overflowY:\"auto\"\r\n            }}>\r\n                <CardContent>\r\n                    <Typography >\r\n                        <b> Тип обращения: </b> {appeal.typeappeal}\r\n                    </Typography>\r\n                    <Typography >\r\n                        <b>Дата обращения:</b> {appeal.date}\r\n                    </Typography>\r\n                    <Typography  >\r\n                    <b>Текст обращения: </b>   {appeal.text}\r\n                    </Typography>\r\n                    <Typography variant=\"body1\" sx={{\r\n                        mt:2\r\n                    }}>\r\n                    <b>Не обработано</b>   \r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n        ))}\r\n        {answers.map((answer)=>(\r\n            <Grid item md={4}>\r\n            <Card className=\"scrollbar\" sx={{\r\n                height:\"200px\",\r\n                border:\"1px #000 solid\",\r\n                overflowY:\"auto\"\r\n            }}>\r\n                <CardContent>\r\n                    <Typography >\r\n                        <b> Тип обращения: </b> {answer.appeal.typeappeal}\r\n                    </Typography>\r\n                    <Typography >\r\n                        <b>Дата обращения:</b> {answer.appeal.date}\r\n                    </Typography>\r\n                    <Typography  >\r\n                    <b>Текст обращения: </b>   {answer.appeal.text}\r\n                    </Typography>\r\n                    <Typography variant=\"body1\" sx={{\r\n                        mt:2\r\n                    }}>\r\n                    <b>Ответ: </b> {answer.answertext}   \r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n        ))}\r\n    </Grid>\r\n</Box>\r\n</>\r\n  );\r\n}\r\n\r\nexport default AppealHistory;","C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\components\\RegisterModal.tsx",["115","116","117","118","119","120","121"],[],"import React, {useState} from \"react\";\r\nimport Box from '@mui/material/Box';\r\nimport Modal from '@mui/material/Modal';\r\nimport Button from '@mui/material/Button';\r\nimport { TextField, Typography } from '@mui/material';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../assets/css/index.css\";\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport Alert from '@mui/material/Alert'; \r\nimport {useDispatch} from \"react-redux\";\r\nimport {AppDispatch} from \"../redux/store\"\r\nimport AuthService from \"../redux/services/AuthService\"\r\nimport {LoginModel,RegistrationModel} from '../models/RequestModel';\r\nimport sha256 from \"sha256\";\r\nimport {RegisterSuccess} from \"../redux/actions/authActions\";\r\nimport { clientActions } from \"../redux/slices/clientslice\";\r\n\r\ninterface RegProps {\r\n\tregOpen: boolean,\r\n\tregHandlerClose: () => void\r\n}\r\n\r\nconst style = {\r\n    position: 'absolute' as 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 400,\r\n    bgcolor: 'background.paper',\r\n    border: '2px solid #000',\r\n    boxShadow: 24,\r\n    p: 4,\r\n    display:\"flex\",\r\n    flexDirection:\"column\",\r\n    alignItems:\"center\"\r\n  };\r\n\r\nfunction RegisterModal(props: RegProps){\r\n\r\n  interface State {\r\n    name: string,\r\n    surname: string,\r\n    email: string,\r\n    mainpassword: string,\r\n    passwordcheck: string\r\n  }\r\n\r\n  const [wrongPassShow,setWrongPassShow] = React.useState(false);\r\n  const toggleWrongPassShow = () => setWrongPassShow(!wrongPassShow);\r\n  const [successShow,setSuccessShow] = useState(false);\r\n    const toggleSuccessShow = () => setSuccessShow(!successShow)\r\n    const [noDataShow,setNoDataShow] = React.useState(false);\r\n    const toggleNoDataShow = () => setNoDataShow(!noDataShow);\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleOpen = () => setOpen(true);\r\n    const navigate = useNavigate();\r\n    const handleClose = () => props.regHandlerClose();\r\n    const dispatch = useDispatch<AppDispatch>();\r\n    const [show, setShow] = useState(false);\r\n    const toggleShow = () => setShow(!show);\r\n    const [nullShow, setNullShow] = useState(false);\r\n    const toggleNullShow = () => setNullShow(!nullShow);\r\n    const [values, setValues] = useState<State>({\r\n      name: '',\r\n      surname: '',\r\n      email: '',\r\n      mainpassword: '',\r\n      passwordcheck: ''\r\n  })\r\n    \r\n        const handleChange = (prop: keyof State) => (event: React.ChangeEvent<HTMLInputElement>) => {\r\n            setValues({...values, [prop]: event.target.value.trim()});\r\n        };\r\n        const signUp = (event: any) => {\r\n           if (values.mainpassword !== values.passwordcheck){setWrongPassShow(true); return;} \r\n           if (values.name===\"\"||values.surname===\"\"||values.email===\"\"||values.mainpassword===\"\"){setNoDataShow(true);return;}\r\n          const data: RegistrationModel = {\r\n            password: sha256(values.mainpassword),\r\n            name: values.name,\r\n            surname: values.surname,\r\n            email: values.email\r\n          };\r\n          AuthService.register(data).then((res) => {\r\n            dispatch(res)\r\n            if (res.type === clientActions.registerSuccess.type){\r\n              \r\n              handleClose();\r\n              setSuccessShow(true);\r\n            }\r\n          });\r\n        };\r\n\r\n    return(\r\n        <>\r\n        <Modal\r\n  open={props.regOpen}\r\n  onClose={handleClose}\r\n  aria-labelledby=\"modal-modal-title\"\r\n  aria-describedby=\"modal-modal-description\"\r\n>\r\n  <Box sx={style}>\r\n  <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\" >\r\n            Регистрация\r\n          </Typography>\r\n          <TextField fullWidth label=\"Фамилия\" onChange={handleChange(\"surname\")} sx={{\r\n            mt:2,\r\n            mb:2\r\n            }}>\r\n\r\n          </TextField>\r\n          <TextField fullWidth label=\"Имя\" onChange={handleChange(\"name\")} sx={{\r\n            }}>\r\n\r\n          </TextField>\r\n          <TextField fullWidth type=\"email\" label=\"Email\" onChange={handleChange(\"email\")} sx={{\r\n            mt:2,\r\n            mb:2\r\n            }}>\r\n\r\n          </TextField>\r\n          <TextField fullWidth label=\"Пароль\" onChange={handleChange(\"mainpassword\")} type=\"password\">\r\n\r\n          </TextField>\r\n          <TextField fullWidth label=\"Повторите пароль\" onChange={handleChange(\"passwordcheck\")} type=\"password\" sx={{\r\n            mt:2,\r\n            mb:2\r\n            }}>\r\n\r\n            </TextField>\r\n            <Button variant=\"contained\" onClick={signUp} sx={{\r\n            }}>\r\n                Зарегистрироваться\r\n            </Button>\r\n          \r\n  </Box>\r\n</Modal>\r\n<Snackbar open={wrongPassShow} autoHideDuration={5000} onClose={toggleWrongPassShow}>\r\n        <Alert onClose={toggleWrongPassShow} severity=\"error\" sx={{ width: '100%' }}>\r\n          Пароли не совпадают!\r\n        </Alert>\r\n      </Snackbar>\r\n      <Snackbar open={noDataShow} autoHideDuration={5000} onClose={toggleNoDataShow}>\r\n        <Alert onClose={toggleNoDataShow} severity=\"error\" sx={{ width: '100%' }}>\r\n          Заполните все поля!\r\n        </Alert>\r\n      </Snackbar>\r\n      <Snackbar open={successShow} autoHideDuration={5000} onClose={toggleSuccessShow}>\r\n        <Alert onClose={toggleSuccessShow} severity=\"success\" sx={{ width: '100%' }}>\r\n          Регистрация прошла успешно.\r\n        </Alert>\r\n      </Snackbar>\r\n\r\n  </>)\r\n}\r\n\r\n\r\n\r\nexport default RegisterModal;","C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\components\\AuthModal.tsx",["122","123","124","125"],[],"import React, {useState} from \"react\";\r\nimport Box from '@mui/material/Box';\r\nimport Modal from '@mui/material/Modal';\r\nimport Button from '@mui/material/Button';\r\nimport { TextField, Typography } from '@mui/material';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../assets/css/index.css\";\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport Alert from '@mui/material/Alert'; \r\nimport RegisterModal from './RegisterModal';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {AppDispatch} from \"../redux/store\"\r\nimport AuthService from \"../redux/services/AuthService\"\r\nimport {LoginModel} from '../models/RequestModel';\r\nimport sha256 from \"sha256\";\r\nimport { clientActions } from \"../redux/slices/clientslice\";\r\n\r\ninterface AuthProps {\r\n\topen: boolean,\r\n\thandlerClose: () => void\r\n}\r\n\r\nconst style = {\r\n    position: 'absolute' as 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 400,\r\n    bgcolor: 'background.paper',\r\n    border: '2px solid #000',\r\n    boxShadow: 24,\r\n    p: 4,\r\n    display:\"flex\",\r\n    flexDirection:\"column\",\r\n    alignItems:\"center\"\r\n  };\r\n\r\nfunction AuthModal(props: AuthProps){\r\n\r\n    interface State {\r\n        email: string,\r\n        password: string\r\n    }\r\n    const [open, setOpen] = React.useState(false);\r\n    const [regOpen,setRegOpen] = React.useState(false);\r\n    const handleRegOpen = () => { handleClose(); setRegOpen(true)}\r\n    const handleOpen = () => setOpen(true);\r\n    const navigate = useNavigate();\r\n    const handleClose = () => props.handlerClose();\r\n    const dispatch = useDispatch<AppDispatch>();\r\n    const [successShow,setSuccessShow] = useState(false);\r\n    const toggleSuccessShow = () => setSuccessShow(!successShow)\r\n    const [show, setShow] = useState(false);\r\n    const toggleShow = () => setShow(!show);\r\n    const [nullShow, setNullShow] = useState(false);\r\n    const toggleNullShow = () => setNullShow(!nullShow);\r\n        const [values, setValues] = useState<State>({\r\n            email: '',\r\n            password: ''\r\n        });\r\n    \r\n        const handleChange = (prop: keyof State) => (event: React.ChangeEvent<HTMLInputElement>) => {\r\n            setValues({...values, [prop]: event.target.value.trim()});\r\n        };\r\n        const logIn = () => {\r\n            const data: LoginModel = {\r\n                email: values.email,\r\n                password: sha256(values.password)\r\n            };\r\n            AuthService.login(data).then((res) => {\r\n                dispatch(res)\r\n                if (res.type === clientActions.loginSuccess.type) {\r\n\r\n                    handleClose();\r\n                    setSuccessShow(true);\r\n\r\n                }\r\n                else {setShow(true)}\r\n            })\r\n\r\n        }\r\n\r\n    return(\r\n        <>\r\n        <Modal\r\n  open={props.open}\r\n  onClose={handleClose}\r\n  aria-labelledby=\"modal-modal-title\"\r\n  aria-describedby=\"modal-modal-description\"\r\n>\r\n  <Box sx={style}>\r\n  <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\" >\r\n            Авторизация\r\n          </Typography>\r\n          <TextField fullWidth type=\"email\" label=\"Email\" onChange={handleChange(\"email\")} sx={{\r\n            mt:2,\r\n            mb:2\r\n            }}>\r\n\r\n          </TextField>\r\n          <TextField fullWidth label=\"Пароль\" type=\"password\" onChange={handleChange(\"password\")}>\r\n\r\n          </TextField>\r\n          <Box sx={{\r\n            mt:2,\r\n            mx:\"auto\",\r\n            display:\"flex\",\r\n            justifyContent:\"space-between\"\r\n          }}>\r\n            <Button variant=\"contained\" onClick={logIn} sx={{\r\n                mr:8\r\n            }}>\r\n                Войти\r\n            </Button>\r\n            <Button variant=\"text\" sx={{\r\n                ml:8\r\n            }} onClick={handleRegOpen}>\r\n                Регистрация\r\n            </Button>\r\n          </Box>\r\n          \r\n  </Box>\r\n</Modal>\r\n<RegisterModal regOpen={regOpen} regHandlerClose={() => setRegOpen(false)}/>\r\n<Snackbar open={show} autoHideDuration={5000} onClose={toggleShow}>\r\n        <Alert onClose={toggleShow} severity=\"error\" sx={{ width: '100%' }}>\r\n          Неверный логин или пароль!\r\n        </Alert>\r\n      </Snackbar>\r\n      <Snackbar open={successShow} autoHideDuration={5000} onClose={toggleSuccessShow}>\r\n        <Alert onClose={toggleSuccessShow} severity=\"success\" sx={{ width: '100%' }}>\r\n          Авторизация прошла успешно.\r\n        </Alert>\r\n      </Snackbar>\r\n  </>)\r\n}\r\n\r\n\r\n\r\nexport default AuthModal;","C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\components\\DocHome.tsx",["126"],[],"import React from 'react';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport Grid from '@mui/material/Grid'\r\nimport Box from '@mui/material/Box'\r\nimport TextField from '@mui/material/TextField'\r\nimport Button from '@mui/material/Button'\r\nimport Card from '@mui/material/Card'\r\nimport Modal from '@mui/material/Modal';\r\nimport AppealService from '../redux/services/AppealService';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport Alert from '@mui/material/Alert'; \r\nimport { Appeal } from '../models/AppealModel';\r\nimport { CardContent, Typography, SelectChangeEvent } from '@mui/material';\r\nimport \"../assets/css/scrollbar.css\"\r\nimport { PostAnswer } from '../models/AnswerModel';\r\nimport AnswerService from '../redux/services/AnswerService';\r\n\r\nconst style = {\r\n    position: 'absolute' as 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 500,\r\n    bgcolor: 'background.paper',\r\n    border: '2px solid #000',\r\n    boxShadow: 24,\r\n    p: 4,\r\n    display:\"flex\",\r\n    flexDirection:\"column\",\r\n  };\r\n\r\n  function DocHome() {\r\n\r\n    const navigate = useNavigate();\r\n    const [noDataShow,setNoDataShow] = React.useState(false);\r\n    const noDataHandleShow = () => setNoDataShow(true)\r\n    const noDataHandleClose = () => setNoDataShow(false)\r\n    const [show,setShow] = React.useState(false);\r\n   const showClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    const [appeals,setAppeals] = React.useState<Appeal[]>([]);\r\n    const [open,setOpen] = React.useState(false);\r\n    const handleClose = () => setOpen(false);\r\n    const handleOpen = () => setOpen(true);\r\n    const [key,setKey] = React.useState<boolean>(false);\r\n    const [tmpAnswer,setTmpAnswer] = React.useState<PostAnswer>({\r\n        appeal:undefined,\r\n        answertext:\"\"\r\n    })\r\n    const textChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTmpAnswer({...tmpAnswer,answertext:event.target.value.trim()});\r\n    }\r\n    React.useEffect(() => {\r\n        if (key) return;\r\n        AppealService.getAppeals().then((res)=>{\r\n          if (res !== undefined){\r\n            setAppeals(res)\r\n          }\r\n        })\r\n        setKey(true)\r\n      }, [appeals,key])\r\n\r\n    return (\r\n<>\r\n<Box sx={{\r\n    mt:2,\r\n    mx:4,\r\n    display:\"flex\",\r\n    flexDirection:\"column\",\r\n    alignItems:\"center\",\r\n}}>\r\n    <Typography variant=\"h4\" sx={{\r\n    }}>\r\n        Обращения пациентов\r\n    </Typography>\r\n    <Grid container mt={1} rowSpacing={3} columnSpacing={3} columns={{md: 12}} >\r\n        {appeals.map((appeal)=>(\r\n            <Grid item md={4}>\r\n            <Card className=\"scrollbar\" sx={{\r\n                border:\"1px #000 solid\",\r\n                overflowY:\"auto\"\r\n            }}>\r\n                <CardContent>\r\n                    <Typography>\r\n                        <b> Пациент: </b> {appeal.user.surname} {appeal.user.name}\r\n                    </Typography>\r\n                    <Typography >\r\n                        <b> Тип обращения: </b> {appeal.typeappeal}\r\n                    </Typography>\r\n                    <Typography >\r\n                        <b>Дата обращения:</b> {appeal.date}\r\n                    </Typography>\r\n                    <Button variant=\"contained\" onClick={e=>{setTmpAnswer({...tmpAnswer,appeal:appeal});handleOpen()}} sx={{\r\n                        mt:2\r\n                    }}>\r\n                        Рассмотреть\r\n                    </Button>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n        ))}\r\n        \r\n    </Grid>\r\n</Box>\r\n<Modal open={open}\r\n        onClose={handleClose}>\r\n    <Box sx={style}>\r\n    <Typography>\r\n        <b> Пациент: </b> {tmpAnswer?.appeal?.user?.surname} {tmpAnswer?.appeal?.user?.name}\r\n    </Typography>\r\n    <Typography >\r\n        <b> Тип обращения: </b> {tmpAnswer?.appeal?.typeappeal}\r\n    </Typography>\r\n    <Typography >\r\n        <b>Дата обращения:</b> {tmpAnswer?.appeal?.date}\r\n    </Typography>\r\n      <Typography>\r\n        <b>Текст обращения: </b> {tmpAnswer?.appeal?.text} \r\n      </Typography>\r\n      <TextField multiline label=\"Текст ответа\" onChange={textChange} fullWidth minRows={7} size=\"medium\" sx={{\r\n    mt:2,\r\n    mb:2\r\n  }}\r\n  >\r\n\r\n  </TextField>\r\n  <Button onClick={e=>{\r\n    if(tmpAnswer?.answertext===\"\"){noDataHandleShow();return;}\r\n    AnswerService.AddAnswer(tmpAnswer).then((res)=>{\r\n        if (res){\r\n            handleClose();\r\n            handleShow();\r\n            setTimeout(()=>{navigate(0)},3000) ;\r\n        }\r\n    });\r\n\r\n    \r\n  }} variant=\"contained\">\r\n    Ответить\r\n  </Button>\r\n    </Box>\r\n</Modal>\r\n<Snackbar open={noDataShow} autoHideDuration={5000} onClose={noDataHandleClose}>\r\n        <Alert onClose={noDataHandleClose} severity=\"warning\" sx={{ width: '100%' }}>\r\n          Заполните все поля.\r\n        </Alert>\r\n      </Snackbar>\r\n      <Snackbar open={show} autoHideDuration={5000} onClose={showClose}>\r\n        <Alert onClose={showClose} severity=\"success\" sx={{ width: '100%' }}>\r\n          Ответ успешно отправлен.\r\n        </Alert>\r\n      </Snackbar>\r\n</>\r\n );\r\n}\r\nexport default DocHome;","C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\redux\\slices\\clientslice.ts",[],[],"C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\components\\PsixHome.tsx",["127"],[],"import React from 'react';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Box from '@mui/material/Box';\r\nimport TextField from '@mui/material/TextField';\r\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport Button from '@mui/material/Button';\r\nimport AuthModal from './AuthModal';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {useNavigate} from 'react-router-dom';\r\nimport \"../assets/css/index.css\";\r\nimport { useSelector} from \"react-redux\";\r\nimport { RootState} from \"../redux/store\";\r\nimport { Typography } from '@mui/material';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport Alert from '@mui/material/Alert'; \r\nimport {PostAppeal} from \"../models/AppealModel\"\r\nimport { TypeAppeal } from '../models/TypeAppealModel';\r\nimport AppealService from '../redux/services/AppealService';\r\nimport TypeAppealService from '../redux/services/TypeAppealService';\r\n\r\n\r\nfunction PsixHome() {\r\n\r\n  const handleChange = (event: SelectChangeEvent) => {\r\n    setTmpAppeal({...tmpAppeal,typeappeal:event.target.value});\r\n  };\r\n   const handleOpen = () => {\r\n    setOpen(true);\r\n   }\r\n   const [noDataShow,setNoDataShow] = React.useState(false);\r\n   const noDataHandleShow = () => setNoDataShow(true)\r\n   const noDataHandleClose = () => setNoDataShow(false)\r\n   const [show,setShow] = React.useState(false);\r\n   const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n   const [types,setTypes] = React.useState<TypeAppeal[]>([]);\r\n   const user = useSelector((state: RootState) => state);\r\n  const [open, setOpen] = React.useState(false);\r\n  const navigate = useNavigate();\r\n  const [key,setKey] = React.useState<boolean>(false);\r\n  const [tmpAppeal,setTmpAppeal] = React.useState<PostAppeal>({\r\n    typeappeal:\"\",\r\n    text:\"\"\r\n  })\r\n\r\n  const textChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTmpAppeal({...tmpAppeal,text:event.target.value.trim()});\r\n};\r\n\r\n  React.useEffect(() => {\r\n    if (key) return;\r\n    TypeAppealService.getTypesAppeal().then((res)=>{\r\n      if (res !== undefined){\r\n        setTypes(res)\r\n      }\r\n    })\r\n    setKey(true)\r\n  }, [types,key])\r\n\r\n  return (\r\n    <>\r\n    <Box sx={{\r\n      backgroundColor:\"#FFF\",\r\n      display:\"flex\",\r\n      flexDirection:\"column\",\r\n      alignItems:\"center\",\r\n      width:\"100%\",\r\n      margin:\"15px auto\",\r\n    }}>\r\n      <Typography variant=\"h4\"  >\r\n        Здравствуйте!\r\n      </Typography>\r\n      <Typography variant=\"h6\" sx={{\r\n        mt:1,\r\n        mb:2\r\n      }} >\r\n        Здесь вы можете обратиться к нам за помощью. Наши специалисты обязательно постараются вам помочь.\r\n      </Typography>\r\n    <FormControl style={{\r\n      width:\"30%\",\r\n\r\n    }}>\r\n  <InputLabel id=\"demo-simple-select-label\">Тип обращения</InputLabel>\r\n  <Select\r\n    labelId=\"demo-simple-select-label\"\r\n    id=\"demo-simple-select\"\r\n    value={tmpAppeal.typeappeal}\r\n    label=\"Age\"\r\n    onChange={handleChange}\r\n  >\r\n    {types.map((type)=>(\r\n      <MenuItem value={type.TypeName}>{type.TypeName}</MenuItem>\r\n    ))}\r\n  </Select>\r\n  <TextField multiline label=\"Текст обращения\" onChange={textChange} fullWidth minRows={7} size=\"medium\" sx={{\r\n    mt:2\r\n  }}\r\n  >\r\n\r\n  </TextField>\r\n  <Button variant=\"contained\" sx={{\r\n    mt:2,\r\n    mx:\"auto\",\r\n    width:\"30%\",\r\n  }} onClick={e=>{if (user?.client.isAuth){\r\n    if (tmpAppeal.typeappeal===\"\"||tmpAppeal.text===\"\"){noDataHandleShow();return;}\r\n    AppealService.AddAppeal(tmpAppeal).then((res)=>{\r\n      if(res){\r\n        handleShow(); \r\n         setTimeout(()=>{navigate(0)},3000) \r\n       \r\n      }\r\n    });\r\n    \r\n  }\r\n  else{setOpen(true)}}}>\r\n  Отправить\r\n  </Button>\r\n</FormControl>\r\n\r\n    </Box>\r\n    <AuthModal open={open} handlerClose={() => setOpen(false)}/>\r\n    <Snackbar open={show} autoHideDuration={3000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\" sx={{ width: '100%' }}>\r\n          Ваше обращение успешно отправлено.\r\n        </Alert>\r\n      </Snackbar>\r\n      <Snackbar open={noDataShow} autoHideDuration={3000} onClose={noDataHandleClose}>\r\n        <Alert onClose={noDataHandleClose} severity=\"warning\" sx={{ width: '100%' }}>\r\n          Заполните все поля.\r\n        </Alert>\r\n      </Snackbar>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default PsixHome;\r\n","C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\redux\\services\\AuthService.ts",["128","129","130"],[],"import axios from 'axios';\r\nimport {Answer, LoginModel, RegistrationModel} from \"../../models/RequestModel\";\r\nimport {removeCookie, setCookie} from \"typescript-cookie\";\r\nimport {RegisterSuccess, RegisterFail, LoginSuccess, LoginFail, Logout} from \"../actions/authActions\"\r\nimport {User} from \"../../models/UserModel\";\r\nimport {clientActions} from \"../slices/clientslice\";\r\n\r\nconst API_URL = \"http://localhost:8080/auth/\";\r\n\r\n\r\nclass AuthService {\r\n\tregister(reg: RegistrationModel) {\r\n\t\treturn axios.post(API_URL + \"signup\", reg)\r\n\t\t\t.then((res) => {\r\n\t\t\t\tconst data: Answer = res.data;\r\n\t\t\t\tif (data.status) {\r\n\t\t\t\t\tsetCookie(\"access_token\", data.answer.access_token, {expires: 1, path: ''});\r\n\t\t\t\t\tsetCookie(\"refresh_token\", data.answer.refresh_token, {path: ''});\r\n\t\t\t\t\tconst user: User = data.answer.user;\r\n\t\t\t\t\tlocalStorage.setItem('user', JSON.stringify(user))\r\n\t\t\t\t\treturn clientActions.registerSuccess({isAuth: true, user: user});\r\n\t\t\t\t}\r\n\t\t\t\treturn RegisterFail(data.errorText!);\r\n\t\t\t}).catch((err) => {\r\n\t\t\t\treturn RegisterFail(err);\r\n\t\t\t})\r\n\t}\r\n\r\n\tlogin(login: LoginModel) {\r\n\t\treturn axios.post(API_URL + \"signin\", login).then(\r\n\t\t\t(res) => {\r\n\t\t\t\tconst data: Answer = res.data;\r\n\t\t\t\tif (data.status) {\r\n\t\t\t\t\tsetCookie(\"access_token\", data.answer.access_token, {expires: 1, path: ''});\r\n\t\t\t\t\tsetCookie(\"refresh_token\", data.answer.refresh_token, {path: ''});\r\n\t\t\t\t\tconst user: User = data.answer.user;\r\n\t\t\t\t\tlocalStorage.setItem('user', JSON.stringify(user));\r\n\t\t\t\t\treturn clientActions.loginSuccess({isAuth: true, user: user});\r\n\t\t\t\t}\r\n\t\t\t\treturn LoginFail(data.errorText!);\r\n\t\t\t}).catch((err) => {\r\n\t\t\treturn LoginFail(err);\r\n\t\t})\r\n\t}\r\n\tlogout(){\r\n\t\tremoveCookie(\"access_token\", {path: ''});\r\n\t\tremoveCookie(\"refresh_token\", {path: ''});\r\n\t\tlocalStorage.removeItem('user');\r\n\t\treturn clientActions.logout();\r\n\t}\r\n}\r\nexport default new AuthService();","C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\redux\\services\\AnswerService.ts",["131","132","133"],[],"import axios from 'axios';\r\nimport {Answer} from \"../../models/RequestModel\";\r\nimport authHeader from '../AuthHeader';\r\nimport {Appeal, PostAppeal} from \"../../models/AppealModel\";\r\nimport { TypeAppeal } from '../../models/TypeAppealModel';\r\nimport { AnswerModel,PostAnswer } from '../../models/AnswerModel';\r\nimport { Dates } from '../../models/DatesModel';\r\n\r\nconst API_URL = \"http://localhost:8080/answers/\";\r\n\r\n\r\nclass AnswerService {\r\n        getAnswers(){\r\n            return axios.get(API_URL + \"get-all-answers\",{headers:authHeader()})\r\n            .then((response) => {\r\n                console.log(response.data);\r\n                const data: Answer = response.data;\r\n                if (data.status){\r\n                  const answers: AnswerModel[] = data.answer.answers\r\n                  return answers;\r\n                }\r\n                return []\r\n              })\r\n              .catch((error) => {\r\n                console.log(error);\r\n                return []\r\n              });\r\n        }\r\n        \r\n        AddAnswer(data:PostAnswer){\r\n            return axios.post(API_URL + \"add-answer\",data,{headers:authHeader()})\r\n            .then((response) => {\r\n                const data: Answer = response.data;\r\n                  return data.status;\r\n              })\r\n              .catch((error) => {\r\n                console.log(error);\r\n                return false;\r\n              });\r\n        }\r\n        MakeReport(data:Dates){\r\n            return axios.post(API_URL + \"report\",data,{headers:authHeader()})\r\n            .then((response) => {\r\n                const data: Answer = response.data;\r\n                  return data.status;\r\n              })\r\n              .catch((error) => {\r\n                console.log(error);\r\n                return false;\r\n              });\r\n        }\r\n}\r\nexport default new AnswerService();","C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\redux\\services\\AppealService.ts",[],[],"C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\redux\\AuthHeader.ts",[],[],"C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\redux\\actions\\authActions.tsx",[],[],"C:\\Users\\Кристина\\Downloads\\Telegram Desktop\\psixCentr\\main\\src\\redux\\services\\TypeAppealService.ts",[],[],{"ruleId":"134","severity":1,"message":"135","line":1,"column":16,"nodeType":"136","messageId":"137","endLine":1,"endColumn":24},{"ruleId":"134","severity":1,"message":"138","line":4,"column":10,"nodeType":"136","messageId":"137","endLine":4,"endColumn":19},{"ruleId":"134","severity":1,"message":"139","line":28,"column":11,"nodeType":"136","messageId":"137","endLine":28,"endColumn":16},{"ruleId":"134","severity":1,"message":"140","line":29,"column":7,"nodeType":"136","messageId":"137","endLine":29,"endColumn":18},{"ruleId":"134","severity":1,"message":"141","line":42,"column":10,"nodeType":"136","messageId":"137","endLine":42,"endColumn":21},{"ruleId":"134","severity":1,"message":"142","line":45,"column":9,"nodeType":"136","messageId":"137","endLine":45,"endColumn":26},{"ruleId":"134","severity":1,"message":"143","line":53,"column":9,"nodeType":"136","messageId":"137","endLine":53,"endColumn":27},{"ruleId":"144","severity":1,"message":"145","line":72,"column":11,"nodeType":"146","endLine":74,"endColumn":16},{"ruleId":"134","severity":1,"message":"147","line":48,"column":12,"nodeType":"136","messageId":"137","endLine":48,"endColumn":22},{"ruleId":"134","severity":1,"message":"148","line":48,"column":24,"nodeType":"136","messageId":"137","endLine":48,"endColumn":37},{"ruleId":"134","severity":1,"message":"149","line":49,"column":12,"nodeType":"136","messageId":"137","endLine":49,"endColumn":20},{"ruleId":"134","severity":1,"message":"150","line":49,"column":22,"nodeType":"136","messageId":"137","endLine":49,"endColumn":33},{"ruleId":"134","severity":1,"message":"151","line":54,"column":12,"nodeType":"136","messageId":"137","endLine":54,"endColumn":22},{"ruleId":"134","severity":1,"message":"152","line":55,"column":11,"nodeType":"136","messageId":"137","endLine":55,"endColumn":23},{"ruleId":"134","severity":1,"message":"153","line":14,"column":10,"nodeType":"136","messageId":"137","endLine":14,"endColumn":14},{"ruleId":"134","severity":1,"message":"154","line":14,"column":9,"nodeType":"136","messageId":"137","endLine":14,"endColumn":19},{"ruleId":"134","severity":1,"message":"155","line":16,"column":9,"nodeType":"136","messageId":"137","endLine":16,"endColumn":24},{"ruleId":"134","severity":1,"message":"156","line":55,"column":12,"nodeType":"136","messageId":"137","endLine":55,"endColumn":16},{"ruleId":"134","severity":1,"message":"157","line":56,"column":11,"nodeType":"136","messageId":"137","endLine":56,"endColumn":21},{"ruleId":"134","severity":1,"message":"158","line":57,"column":11,"nodeType":"136","messageId":"137","endLine":57,"endColumn":19},{"ruleId":"134","severity":1,"message":"159","line":61,"column":11,"nodeType":"136","messageId":"137","endLine":61,"endColumn":21},{"ruleId":"134","severity":1,"message":"160","line":63,"column":11,"nodeType":"136","messageId":"137","endLine":63,"endColumn":25},{"ruleId":"134","severity":1,"message":"156","line":45,"column":12,"nodeType":"136","messageId":"137","endLine":45,"endColumn":16},{"ruleId":"134","severity":1,"message":"157","line":48,"column":11,"nodeType":"136","messageId":"137","endLine":48,"endColumn":21},{"ruleId":"134","severity":1,"message":"158","line":49,"column":11,"nodeType":"136","messageId":"137","endLine":49,"endColumn":19},{"ruleId":"134","severity":1,"message":"160","line":57,"column":11,"nodeType":"136","messageId":"137","endLine":57,"endColumn":25},{"ruleId":"134","severity":1,"message":"161","line":14,"column":35,"nodeType":"136","messageId":"137","endLine":14,"endColumn":52},{"ruleId":"134","severity":1,"message":"157","line":29,"column":10,"nodeType":"136","messageId":"137","endLine":29,"endColumn":20},{"ruleId":"134","severity":1,"message":"155","line":4,"column":9,"nodeType":"136","messageId":"137","endLine":4,"endColumn":24},{"ruleId":"134","severity":1,"message":"162","line":4,"column":40,"nodeType":"136","messageId":"137","endLine":4,"endColumn":52},{"ruleId":"134","severity":1,"message":"163","line":4,"column":65,"nodeType":"136","messageId":"137","endLine":4,"endColumn":71},{"ruleId":"134","severity":1,"message":"164","line":4,"column":9,"nodeType":"136","messageId":"137","endLine":4,"endColumn":15},{"ruleId":"134","severity":1,"message":"165","line":4,"column":17,"nodeType":"136","messageId":"137","endLine":4,"endColumn":27},{"ruleId":"134","severity":1,"message":"166","line":5,"column":10,"nodeType":"136","messageId":"137","endLine":5,"endColumn":20},"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'positions' is defined but never used.","'pages' is assigned a value but never used.","'settingsDoc' is assigned a value but never used.","'anchorElNav' is assigned a value but never used.","'handleOpenNavMenu' is assigned a value but never used.","'handleCloseNavMenu' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'startValue' is assigned a value but never used.","'setStartValue' is assigned a value but never used.","'endValue' is assigned a value but never used.","'setEndValue' is assigned a value but never used.","'appealType' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'type' is defined but never used.","'LoginModel' is defined but never used.","'RegisterSuccess' is defined but never used.","'open' is assigned a value but never used.","'handleOpen' is assigned a value but never used.","'navigate' is assigned a value but never used.","'toggleShow' is assigned a value but never used.","'toggleNullShow' is assigned a value but never used.","'SelectChangeEvent' is defined but never used.","'LoginSuccess' is defined but never used.","'Logout' is defined but never used.","'Appeal' is defined but never used.","'PostAppeal' is defined but never used.","'TypeAppeal' is defined but never used."]