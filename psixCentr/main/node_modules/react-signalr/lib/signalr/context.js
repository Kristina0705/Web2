"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSignalRContext = void 0;
const signalr_1 = require("@microsoft/signalr");
const hermes_channel_1 = __importDefault(require("hermes-channel"));
const utils_1 = require("../utils");
const hooks_1 = require("./hooks");
const provider_1 = require("./provider");
const uuid_1 = require("uuid");
const providerNativeFactory_1 = require("./provider/providerNativeFactory");
const SIGNAL_R_INVOKE = "SIGNAL_R_INVOKE";
function createSignalRContext(options) {
    const events = [];
    const context = {
        connection: null,
        useSignalREffect: null,
        shareConnectionBetweenTab: (options === null || options === void 0 ? void 0 : options.shareConnectionBetweenTab) || false,
        invoke: (methodName, ...args) => {
            const SIGNAL_R_RESPONSE = (0, uuid_1.v4)();
            (0, utils_1.sendWithHermes)(SIGNAL_R_INVOKE, { methodName, args, callbackResponse: SIGNAL_R_RESPONSE }, context.shareConnectionBetweenTab);
            return new Promise((resolve) => {
                hermes_channel_1.default.on(SIGNAL_R_RESPONSE, (data) => {
                    resolve(data);
                });
            });
        },
        Provider: null,
        on: (event) => {
            var _a;
            if (!events.includes(event)) {
                (_a = context.connection) === null || _a === void 0 ? void 0 : _a.on(event, (...message) => {
                    (0, utils_1.sendWithHermes)(event, message, context.shareConnectionBetweenTab);
                });
            }
            events.push(event);
        },
        off: (event) => {
            var _a;
            if (events.includes(event)) {
                events.splice(events.indexOf(event), 1);
            }
            if (!events.includes(event)) {
                (_a = context.connection) === null || _a === void 0 ? void 0 : _a.off(event);
            }
        },
        //@ts-ignore
        reOn: () => {
            const uniqueEvents = (0, utils_1.removeDuplicates)(events);
            uniqueEvents.forEach((event) => {
                var _a;
                (_a = context.connection) === null || _a === void 0 ? void 0 : _a.on(event, (...message) => {
                    (0, utils_1.sendWithHermes)(event, message, context.shareConnectionBetweenTab);
                });
            });
        },
    };
    context.Provider = context.shareConnectionBetweenTab
        ? (0, provider_1.providerFactory)(context)
        : (0, providerNativeFactory_1.providerNativeFactory)(context);
    async function invoke(data) {
        var _a;
        const response = await ((_a = context.connection) === null || _a === void 0 ? void 0 : _a.invoke(data.methodName, ...data.args));
        (0, utils_1.sendWithHermes)(data.callbackResponse, response, context.shareConnectionBetweenTab);
    }
    context.useSignalREffect = (0, hooks_1.createUseSignalREffect)(context);
    hermes_channel_1.default.on(SIGNAL_R_INVOKE, (data) => {
        var _a;
        if (((_a = context.connection) === null || _a === void 0 ? void 0 : _a.state) === signalr_1.HubConnectionState.Connected) {
            invoke(data);
        }
    });
    return context;
}
exports.createSignalRContext = createSignalRContext;
//# sourceMappingURL=context.js.map