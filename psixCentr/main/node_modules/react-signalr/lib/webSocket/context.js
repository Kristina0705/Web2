"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createWebSocketContext = void 0;
const hermes_channel_1 = __importDefault(require("hermes-channel"));
const utils_1 = require("../utils");
const hooks_1 = require("./hooks");
const provider_1 = require("./provider");
const uuid_1 = require("uuid");
const providerNativeFactory_1 = require("./provider/providerNativeFactory");
function createWebSocketContext(options) {
    const SIGNAL_R_INVOKE = options.key + "SOCKET_INVOKE";
    const context = {
        key: options.key,
        connection: null,
        useWebSocketEffect: null,
        shareConnectionBetweenTab: (options === null || options === void 0 ? void 0 : options.shareConnectionBetweenTab) || false,
        invoke: (data) => {
            const SIGNAL_R_RESPONSE = (0, uuid_1.v4)();
            return new Promise((resolve) => {
                hermes_channel_1.default.on(SIGNAL_R_RESPONSE, (data) => {
                    resolve(data);
                });
                (0, utils_1.sendWithHermes)(SIGNAL_R_INVOKE, { data, callbackResponse: SIGNAL_R_RESPONSE }, context.shareConnectionBetweenTab);
            });
        },
        Provider: null, // just for ts ignore
    };
    context.Provider = context.shareConnectionBetweenTab
        ? (0, provider_1.providerFactory)(context)
        : (0, providerNativeFactory_1.providerNativeFactory)(context);
    async function invoke(data) {
        var _a;
        const response = await ((_a = context.connection) === null || _a === void 0 ? void 0 : _a.send(JSON.stringify(data.data)));
        (0, utils_1.sendWithHermes)(data.callbackResponse, response, context.shareConnectionBetweenTab);
    }
    context.useWebSocketEffect = (0, hooks_1.createUseSignalREffect)(context);
    hermes_channel_1.default.on(SIGNAL_R_INVOKE, (data) => {
        var _a;
        if (((_a = context.connection) === null || _a === void 0 ? void 0 : _a.readyState) === WebSocket.OPEN) {
            invoke(data);
        }
    });
    return context;
}
exports.createWebSocketContext = createWebSocketContext;
//# sourceMappingURL=context.js.map